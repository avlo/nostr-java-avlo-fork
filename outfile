diff --git a/nostr-java-event/src/main/java/nostr/event/impl/ChannelCreateEvent.java b/nostr-java-event/src/main/java/nostr/event/impl/ChannelCreateEvent.java
index 8917ad5..3b6e88b 100644
--- a/nostr-java-event/src/main/java/nostr/event/impl/ChannelCreateEvent.java
+++ b/nostr-java-event/src/main/java/nostr/event/impl/ChannelCreateEvent.java
@@ -1,21 +1,22 @@
 package nostr.event.impl;
 
+@EqualsAndHashCode(callSuper = false)
 @Event(name = "Create Channel", nip = 28)
-public class ChannelCreateEvent extends GenericEvent {
+public class ChannelCreateEvent extends EventDecorator {
 
-    public ChannelCreateEvent(@NonNull PublicKey pubKey, ChannelProfile profile) {
-        super(pubKey, Kind.CHANNEL_CREATE, new ArrayList<>(), escapeJsonString(profile.toString()));
+  public ChannelCreateEvent(GenericEvent genericEvent, Profile profile) {
+    super(genericEvent);
+    setKind(Kind.CHANNEL_CREATE);
+    setContent(escapeJsonString(profile.toString()));
   }
 }
diff --git a/nostr-java-event/src/main/java/nostr/event/impl/ChannelMessageEvent.java b/nostr-java-event/src/main/java/nostr/event/impl/ChannelMessageEvent.java
index 6e5d7c3..b050d83 100644
--- a/nostr-java-event/src/main/java/nostr/event/impl/ChannelMessageEvent.java
+++ b/nostr-java-event/src/main/java/nostr/event/impl/ChannelMessageEvent.java
@@ -1,8 +1,5 @@
 package nostr.event.impl;
 
@@ -11,39 +8,40 @@ import nostr.event.tag.EventTag;
 
 @Event(name = "Channel Message", nip = 28)
-public class ChannelMessageEvent extends GenericEvent {
-
-    public ChannelMessageEvent(@NonNull PublicKey pubKey, @NonNull ChannelCreateEvent rootEvent, String content) {
-        super(pubKey, Kind.CHANNEL_MESSAGE, new ArrayList<>(), content);
-        this.addTag(EventTag.builder().idEvent(rootEvent.getId()).marker(Marker.ROOT).build());
-    }
-
-    public ChannelMessageEvent(@NonNull PublicKey pubKey, @NonNull ChannelCreateEvent rootEvent, String content, Relay recommendedRelay) {
-        super(pubKey, Kind.CHANNEL_MESSAGE, new ArrayList<>(), content);
-        final EventTag eventTag = EventTag.builder().idEvent(rootEvent.getId()).marker(Marker.ROOT).build();
-        if (recommendedRelay != null) {
-            eventTag.setRecommendedRelayUrl((recommendedRelay.getHostname()));
-        }
-        this.addTag(eventTag);
-    }
-
-    public ChannelMessageEvent(@NonNull PublicKey pubKey, @NonNull ChannelCreateEvent rootEvent, @NonNull ChannelMessageEvent replyEvent, String content) {
-        super(pubKey, Kind.CHANNEL_MESSAGE, new ArrayList<>(), content);
-        this.addTag(EventTag.builder().idEvent(rootEvent.getId()).marker(Marker.ROOT).build());
-        this.addTag(EventTag.builder().idEvent(replyEvent.getId()).marker(Marker.REPLY).build());
-    }
-
-    public ChannelMessageEvent(@NonNull PublicKey pubKey, @NonNull ChannelCreateEvent rootEvent, @NonNull ChannelMessageEvent replyEvent, String content, Relay recommendedRelay) {
-        this(pubKey, rootEvent, replyEvent, content, recommendedRelay, recommendedRelay);
-    }
-
-    public ChannelMessageEvent(@NonNull PublicKey pubKey, ChannelCreateEvent rootEvent, ChannelMessageEvent replyEvent, String content, Relay recommendedRelayRoot, Relay recommendedRelayReply) {
-        super(pubKey, Kind.CHANNEL_MESSAGE, new ArrayList<>(), content);
-
-        final EventTag rootEventTag = EventTag.builder().idEvent(rootEvent.getId()).marker(Marker.ROOT).build();
+public class ChannelMessageEvent extends EventDecorator {
+  private final ChannelMessageEvent replyEvent;
+
+  public ChannelMessageEvent(GenericEvent genericEvent, ChannelMessageEvent replyEvent) {
+    super(genericEvent);
+    this.replyEvent = replyEvent;
+    this.setKind(Kind.CHANNEL_MESSAGE);
+    this.addTag(EventTag.builder().idEvent(genericEvent.getId()).marker(Marker.ROOT).build());
+  }
+
+//    public ChannelMessageEvent(GenericEvent genericEvent, Relay recommendedRelay) {
+//        this(genericEvent);
+//        if (recommendedRelay != null) {
+//            genericEvent.getTags().get(0).setRecommendedRelayUrl((recommendedRelay.getHostname()));
+//        }
+//        this.addTag(eventTag);
+//    }
+//
+//    public ChannelMessageEvent(@NonNull PublicKey pubKey, @NonNull ChannelCreateEvent rootEvent, @NonNull ChannelMessageEvent replyEvent, String content) {
+//        super(pubKey, Kind.CHANNEL_MESSAGE, new ArrayList<>(), content);
+//        this.addTag(EventTag.builder().idEvent(rootEvent.getId()).marker(Marker.ROOT).build());
+//        this.addTag(EventTag.builder().idEvent(replyEvent.getId()).marker(Marker.REPLY).build());
+//    }
+//
+//    public ChannelMessageEvent(@NonNull PublicKey pubKey, @NonNull ChannelCreateEvent rootEvent, @NonNull ChannelMessageEvent replyEvent, String content, Relay recommendedRelay) {
+//        this(pubKey, rootEvent, replyEvent, content, recommendedRelay, recommendedRelay);
+//    }
+
+  public ChannelMessageEvent(GenericEvent genericEvent, ChannelMessageEvent replyEvent, String content, Relay recommendedRelayRoot, Relay recommendedRelayReply) {
+    this(genericEvent, replyEvent);
+
+    final EventTag rootEventTag = EventTag.builder().idEvent(genericEvent.getId()).marker(Marker.ROOT).build();
     if (recommendedRelayRoot != null) {
       rootEventTag.setRecommendedRelayUrl(recommendedRelayRoot.getHostname());
     }
diff --git a/nostr-java-event/src/main/java/nostr/event/impl/ChannelMetadataEvent.java b/nostr-java-event/src/main/java/nostr/event/impl/ChannelMetadataEvent.java
index 67beac8..4618507 100644
--- a/nostr-java-event/src/main/java/nostr/event/impl/ChannelMetadataEvent.java
+++ b/nostr-java-event/src/main/java/nostr/event/impl/ChannelMetadataEvent.java
@@ -1,28 +1,29 @@
 package nostr.event.impl;
 
 
+@Getter
+@Setter
 @Event(name = "Channel Metadata", nip = 28)
-public class ChannelMetadataEvent extends GenericEvent {
+public class ChannelMetadataEvent extends EventDecorator {
 
-    public ChannelMetadataEvent(@NonNull PublicKey pubKey, @NonNull ChannelCreateEvent event, ChannelProfile profile) {
-        super(pubKey, Kind.CHANNEL_METADATA, new ArrayList<>(), escapeJsonString(profile.toString()));
-        this.addTag(EventTag.builder().idEvent(event.getId()).build());
+  public ChannelMetadataEvent(GenericEvent genericEvent) {
+    super(genericEvent);
+    setKind(Kind.CHANNEL_METADATA);
   }
 
-    public ChannelMetadataEvent(@NonNull PublicKey pubKey, @NonNull EventTag channelCreateEventTag, ChannelProfile profile) {
-        super(pubKey, Kind.CHANNEL_METADATA, new ArrayList<>(), escapeJsonString(profile.toString()));
-        this.addTag(channelCreateEventTag);
-    }
+//    public ChannelMetadataEvent(@NonNull PublicKey pubKey, @NonNull ChannelCreateEvent event, ChannelProfile profile) {
+//        super(pubKey, Kind.CHANNEL_METADATA, new ArrayList<>(), escapeJsonString(profile.toString()));
+//        this.addTag(EventTag.builder().idEvent(event.getId()).build());
+//    }
+//
+//    public ChannelMetadataEvent(@NonNull PublicKey pubKey, @NonNull EventTag channelCreateEventTag, ChannelProfile profile) {
+//        super(pubKey, Kind.CHANNEL_METADATA, new ArrayList<>(), escapeJsonString(profile.toString()));
+//        this.addTag(channelCreateEventTag);
 }
diff --git a/nostr-java-client/src/main/java/nostr/client/Client.java b/nostr-java-client/src/main/java/nostr/client/Client.java
index eb28fa1..2fd9b49 100644
--- a/nostr-java-client/src/main/java/nostr/client/Client.java
+++ b/nostr-java-client/src/main/java/nostr/client/Client.java
@@ -8,6 +8,7 @@ import nostr.base.Relay;
@@ -152,16 +153,17 @@ public class Client {
         });
   }
 
-    public void auth(Identity identity, String challenge) throws NostrException {
-
-        log.log(Level.FINER, "Authenticating {0}", identity);
-        List<Relay> relays = getRelayList();
-        var event = new ClientAuthenticationEvent(identity.getPublicKey(), challenge, relays);
-        BaseMessage authMsg = new ClientAuthenticationMessage(event);
-
-        identity.sign(event);
-        this.send(authMsg);
-    }
+//  public void auth(Identity identity, String challenge) throws NostrException {
+//
+//    log.log(Level.FINER, "Authenticating {0}", identity);
+//    List<Relay> relays = getRelayList();
+//    var event = new ClientAuthenticationEvent(new GenericEventImpl(), challenge, relays);
+//    event.setPubKey(identity.getPublicKey());
+//    BaseMessage authMsg = new ClientAuthenticationMessage(event);
+//
+//    identity.sign(event);
+//    this.send(authMsg);
+//  }
 
   public void auth(String challenge, Relay relay) throws NostrException {
     auth(Identity.getInstance(), challenge, relay);
@@ -170,7 +172,8 @@ public class Client {
   public void auth(Identity identity, String challenge, Relay relay) throws NostrException {
 
     log.log(Level.INFO, "Authenticating...");
-        var event = new ClientAuthenticationEvent(identity.getPublicKey(), challenge, relay);
+    var event = new ClientAuthenticationEvent(new GenericEventImpl(), challenge, relay);
+    event.setPubKey(identity.getPublicKey());
     BaseMessage authMsg = new ClientAuthenticationMessage(event);
 
     identity.sign(event);
diff --git a/nostr-java-event/src/main/java/nostr/event/impl/ClientAuthenticationEvent.java b/nostr-java-event/src/main/java/nostr/event/impl/ClientAuthenticationEvent.java
index 49b28f6..b9fa354 100644
--- a/nostr-java-event/src/main/java/nostr/event/impl/ClientAuthenticationEvent.java
+++ b/nostr-java-event/src/main/java/nostr/event/impl/ClientAuthenticationEvent.java
@@ -1,53 +1,32 @@
 package nostr.event.impl;
 
+@Getter
 @Event(name = "Authentication of clients to relays", nip = 42)
-public class ClientAuthenticationEvent extends GenericEvent {
-
-    public ClientAuthenticationEvent(@NonNull PublicKey pubKey, @NonNull List<BaseTag> tags) {
-        super(pubKey, Kind.CLIENT_AUTH, tags);
-    }
-
-    @Deprecated(forRemoval = true)
-    public ClientAuthenticationEvent(@NonNull PublicKey pubKey, String challenge, @NonNull List<Relay> relays) {
-        super(pubKey, Kind.CLIENT_AUTH);
-
-        List<ElementAttribute> chAttributes = new ArrayList<>();
-        var attribute = ElementAttribute.builder().nip(42).name("challenge").value(challenge).build();
-        chAttributes.add(attribute);
-
-        this.setTags(new ArrayList<>());
-        GenericTag chTag = new GenericTag("auth", 42, chAttributes);
-
-        this.addTag(chTag);
-
-        relays.forEach(r -> {
-            final List<ElementAttribute> relayAttributes = new ArrayList<>();
-            final ElementAttribute relayAttribute = getRelayAttribute(r);
-            relayAttributes.add(relayAttribute);
-            final BaseTag relayTag = new GenericTag("relay", 42, relayAttributes);
-            this.addTag(relayTag);
-        });
-
-        this.setNip(42);
-    }
-
-    public ClientAuthenticationEvent(@NonNull PublicKey pubKey, String challenge, @NonNull Relay relay) {
-        super(pubKey, Kind.CLIENT_AUTH);
+public class ClientAuthenticationEvent extends EventDecorator {
+  private final GenericEvent genericEvent;
+  private final String challenge;
+  private final Relay relay;
+
+  public ClientAuthenticationEvent(GenericEvent genericEvent, String challenge, @NonNull Relay relay) {
+    super(genericEvent);
+    this.genericEvent = genericEvent;
+    this.genericEvent.setKind(Kind.CLIENT_AUTH);
+    this.challenge = challenge;
+    this.relay = relay;
 
     List<ElementAttribute> chAttributes = new ArrayList<>();
     var attribute = ElementAttribute.builder().nip(42).name("challenge").value(challenge).build();
@@ -56,15 +35,15 @@ public class ClientAuthenticationEvent extends GenericEvent {
     this.setTags(new ArrayList<>());
     BaseTag chTag = new GenericTag("auth", 42, chAttributes);
 
-        this.addTag(chTag);
+    this.genericEvent.addTag(chTag);
 
     final List<ElementAttribute> relayAttributes = new ArrayList<>();
     final ElementAttribute relayAttribute = getRelayAttribute(relay);
     relayAttributes.add(relayAttribute);
     final BaseTag relayTag = new GenericTag("relay", 42, relayAttributes);
-        this.addTag(relayTag);
+    this.genericEvent.addTag(relayTag);
 
-        this.setNip(42);
+    this.genericEvent.setNip(42);
   }
 
   private static ElementAttribute getRelayAttribute(Relay relay) {
diff --git a/nostr-java-event/src/main/java/nostr/event/impl/CustomerOrderEvent.java b/nostr-java-event/src/main/java/nostr/event/impl/CustomerOrderEvent.java
index 404a38c..04c514d 100644
--- a/nostr-java-event/src/main/java/nostr/event/impl/CustomerOrderEvent.java
+++ b/nostr-java-event/src/main/java/nostr/event/impl/CustomerOrderEvent.java
@@ -2,36 +2,32 @@ package nostr.event.impl;
 
-@Data
+@Getter
+@Setter
 @EqualsAndHashCode(callSuper = false)
 @Event(name = "", nip = 15)
-public class CustomerOrderEvent extends CheckoutEvent {
-
-    private CustomerOrderEvent() {
-        super();
-    }
-    public CustomerOrderEvent(PublicKey sender, @NonNull Customer customer) {
-        super(sender, customer.getContact().getPublicKey(), customer);
+public class CustomerOrderEvent extends EventDecorator {
+  private final GenericEvent genericEvent;
+  private final Customer customer;
+
+  public CustomerOrderEvent(GenericEvent genericEvent, Customer customer) {
+//        super(sender, customer.getContact().getPublicKey(), customer);
+    super(genericEvent);
+    this.genericEvent = genericEvent;
+    this.customer = customer;
   }
 
   @Getter
@@ -44,7 +40,7 @@ public class CustomerOrderEvent extends CheckoutEvent {
     private final String id;
 
     @JsonProperty
-        private MessageType type;
+    private CheckoutEvent.MessageType type;
 
     @JsonProperty
     private String name;
diff --git a/nostr-java-test/src/main/java/nostr/test/EntityFactory.java b/nostr-java-test/src/main/java/nostr/test/EntityFactory.java
index 7f95179..2997efb 100644
--- a/nostr-java-test/src/main/java/nostr/test/EntityFactory.java
+++ b/nostr-java-test/src/main/java/nostr/test/EntityFactory.java
@@ -1,33 +1,11 @@
 package nostr.test;
 
@@ -35,8 +13,14 @@ import nostr.event.list.PublicKeyList;
 
 @Log
@@ -57,8 +41,12 @@ public class EntityFactory {
     public static DirectMessageEvent createDirectMessageEvent(PublicKey senderPublicKey, PublicKey rcptPublicKey, String content) {
       List<BaseTag> tagList = new ArrayList<>();
       tagList.add(PubKeyTag.builder().publicKey(rcptPublicKey).petName("uq7yfx3l").build());
-            DirectMessageEvent event = new DirectMessageEvent(senderPublicKey, tagList, content);
-            event.update();
+      DirectMessageEvent event = new DirectMessageEvent(
+          new GenericEventImpl());
+      event.setPubKey(senderPublicKey);
+      event.setTags(tagList);
+      event.setContent(content);
+      event.setRecipientPublicKey(rcptPublicKey);
       return event;
     }
 
@@ -68,7 +56,8 @@ public class EntityFactory {
 
     public static InternetIdentifierMetadataEvent createInternetIdentifierMetadataEvent(UserProfile profile) {
       final PublicKey publicKey = profile.getPublicKey();
-            InternetIdentifierMetadataEvent event = new InternetIdentifierMetadataEvent(publicKey, profile);
+      InternetIdentifierMetadataEvent event = new InternetIdentifierMetadataEvent(new GenericEventImpl(), profile);
+      event.setPubKey(publicKey);
       event.update();
       return event;
     }
@@ -84,25 +73,40 @@ public class EntityFactory {
         sbContent.append(", ").append(((PubKeyTag) tagList.get(i)).getPublicKey().toString());
 
       }
-            MentionsEvent event = new MentionsEvent(publicKey, tagList, sbContent.toString());
+      var event = new MentionsEvent(new GenericEventImpl());
+      event.setPubKey(publicKey);
+      event.setTags(tagList);
+      event.setContent(sbContent.toString());
       event.update();
       return event;
     }
 
     public static MetadataEvent createMetadataEvent(UserProfile profile) {
-            final PublicKey publicKey = profile.getPublicKey();
-            return new MetadataEvent(publicKey, profile);
+      var event = new GenericEventImpl();
+      event.setPubKey(profile.getPublicKey());
+      return new MetadataEvent(event, profile);
     }
 
-        public static ReactionEvent createReactionEvent(PublicKey publicKey, GenericEvent original) {
+    public static ReactionEvent createReactionEvent(PublicKey publicKey, GenericEventImpl original) {
       List<BaseTag> tagList = new ArrayList<>();
       tagList.add(EventTag.builder().idEvent(original.getId()).build());
-            return new ReactionEvent(publicKey, tagList, Reaction.LIKE);
+//            return new ReactionEvent(publicKey, tagList, Reaction.LIKE);
+      var event = new ReactionEvent(
+          new GenericEventImpl());
+      event.setPubKey(publicKey);
+      event.setTags(tagList);
+      event.setReaction(Reaction.LIKE);
+      return event;
     }
 
     public static ReplaceableEvent createReplaceableEvent(PublicKey publicKey) {
       String content = generateRamdomAlpha(32);
-            return new ReplaceableEvent(publicKey, 15000, new ArrayList<>(), content);
+      var event = new ReplaceableEvent(
+          new GenericEventImpl());
+      event.setPubKey(publicKey);
+      event.setKind(Kind.valueOf(15000));
+      event.setContent(content);
+      return event;
     }
 
     public static TextNoteEvent createTextNoteEvent(PublicKey publicKey) {
@@ -131,14 +135,14 @@ public class EntityFactory {
     public static GenericTag createGenericTag(PublicKey publicKey, IEvent event) {
       GenericTag tag = new GenericTag("devil");
       tag.addAttribute(ElementAttribute.builder().name("param0").value("Lucifer").nip(666).build());
-            ((GenericEvent) event).addTag(tag);
+      ((GenericEventImpl) event).addTag(tag);
       return tag;
     }
 
     public static GenericTag createGenericTag(PublicKey publicKey, IEvent event, Integer tagNip) {
       GenericTag tag = new GenericTag("devil", tagNip);
       tag.addAttribute(ElementAttribute.builder().name("param0").value("Lucifer").nip(666).build());
-            ((GenericEvent) event).addTag(tag);
+      ((GenericEventImpl) event).addTag(tag);
       return tag;
     }
 
diff --git a/nostr-java-event/src/main/java/nostr/event/impl/InternetIdentifierMetadataEvent.java b/nostr-java-event/src/main/java/nostr/event/impl/InternetIdentifierMetadataEvent.java
index 46899ea..bd6c2c1 100644
--- a/nostr-java-event/src/main/java/nostr/event/impl/InternetIdentifierMetadataEvent.java
+++ b/nostr-java-event/src/main/java/nostr/event/impl/InternetIdentifierMetadataEvent.java
@@ -2,29 +2,28 @@ package nostr.event.impl;
 
-@Data
 @EqualsAndHashCode(callSuper = false)
 @Event(name = "Internet Identifier Metadata Event", nip = 5)
-public final class InternetIdentifierMetadataEvent extends GenericEvent {
+public final class InternetIdentifierMetadataEvent extends EventDecorator implements UpdatableEvent {
+  private final GenericEvent genericEvent;
 
-    public InternetIdentifierMetadataEvent(PublicKey pubKey, @NonNull UserProfile profile) {
-        super(pubKey, Kind.SET_METADATA);
+  public InternetIdentifierMetadataEvent(GenericEvent genericEvent, @NonNull UserProfile profile) {
+    super(genericEvent);
+    this.genericEvent = genericEvent;
+    genericEvent.setKind(Kind.SET_METADATA);
     this.init(profile);
   }
 
@@ -53,4 +52,9 @@ public final class InternetIdentifierMetadataEvent extends GenericEvent {
       throw new RuntimeException(ex);
     }
   }
+
+  @Override
+  public void update() {
+    ((GenericEventImpl) genericEvent).update();
+  }
 }
diff --git a/nostr-java-event/src/main/java/nostr/event/impl/MentionsEvent.java b/nostr-java-event/src/main/java/nostr/event/impl/MentionsEvent.java
index d7dd61e..59c0ae3 100644
--- a/nostr-java-event/src/main/java/nostr/event/impl/MentionsEvent.java
+++ b/nostr-java-event/src/main/java/nostr/event/impl/MentionsEvent.java
@@ -1,35 +1,29 @@
 package nostr.event.impl;
 
 
-@Data
 @EqualsAndHashCode(callSuper = false)
 @Event(name = "Handling Mentions", nip = 8)
-public final class MentionsEvent extends GenericEvent {
+public final class MentionsEvent extends EventDecorator implements UpdatableEvent {
+  private final GenericEvent genericEvent;
 
-    public MentionsEvent(PublicKey pubKey, List<BaseTag> tags, String content) {
-        super(pubKey, Kind.TEXT_NOTE, tags, content);
+  public MentionsEvent(GenericEvent genericEvent) {
+    super(genericEvent);
+    this.genericEvent = genericEvent;
+    this.genericEvent.setPubKey(getPubKey());
+    this.genericEvent.setKind(Kind.TEXT_NOTE);
   }
 
   @Override
   public void update() {
-        super.update();
-
     int index = 0;
-
     // TODO - Refactor with the EntityAttributeUtil class
     while (getTags().iterator().hasNext()) {
       ITag tag = getTags().iterator().next();
diff --git a/nostr-java-event/src/main/java/nostr/event/impl/MerchantRequestPaymentEvent.java b/nostr-java-event/src/main/java/nostr/event/impl/MerchantRequestPaymentEvent.java
index 10448d0..b5b0197 100644
--- a/nostr-java-event/src/main/java/nostr/event/impl/MerchantRequestPaymentEvent.java
+++ b/nostr-java-event/src/main/java/nostr/event/impl/MerchantRequestPaymentEvent.java
@@ -2,32 +2,26 @@ package nostr.event.impl;
 
-@Data
+@Getter
 @EqualsAndHashCode(callSuper = false)
 @Event(name = "", nip = 15)
-public class MerchantRequestPaymentEvent extends CheckoutEvent {
+public class MerchantRequestPaymentEvent extends EventDecorator {
+  private final Payment payment;
 
-    public MerchantRequestPaymentEvent(PublicKey sender, Customer customer, @NonNull Payment payment) {
-        super(sender, customer.getContact().getPublicKey(), payment);
+  public MerchantRequestPaymentEvent(GenericEvent genericEvent, @NonNull Payment payment) {
+    super(genericEvent);
+    this.payment = payment;
   }
 
   @Getter
@@ -40,7 +34,7 @@ public class MerchantRequestPaymentEvent extends CheckoutEvent {
     private final String id;
 
     @JsonProperty
-        private MessageType type;
+    private CheckoutEvent.MessageType type;
 
     @JsonProperty
     private String message;
diff --git a/nostr-java-event/src/main/java/nostr/event/impl/MetadataEvent.java b/nostr-java-event/src/main/java/nostr/event/impl/MetadataEvent.java
index b29a76c..70e33a3 100644
--- a/nostr-java-event/src/main/java/nostr/event/impl/MetadataEvent.java
+++ b/nostr-java-event/src/main/java/nostr/event/impl/MetadataEvent.java
@@ -1,44 +1,36 @@
 package nostr.event.impl;
 
-@Data
 @EqualsAndHashCode(callSuper = false)
 @Event(name = "Metadata")
-public final class MetadataEvent extends GenericEvent {
+public final class MetadataEvent extends EventDecorator implements UpdatableEvent, ValidatableEvent {
 
   private static final String NAME_PATTERN = "\\w[\\w\\-]+\\w";
 
+  private final GenericEvent genericEvent;
   @JsonIgnore
-    private UserProfile profile;
+  private final UserProfile profile;
 
-    public MetadataEvent(PublicKey pubKey, UserProfile profile) {
-        super(pubKey, Kind.SET_METADATA, new ArrayList<BaseTag>());
+  public MetadataEvent(GenericEvent genericEvent, UserProfile profile) {
+    super(genericEvent);
+    this.genericEvent = genericEvent;
+    validate();
     this.profile = profile;
   }
 
   @Override
-    protected void validate() {
+  public void validate() {
     boolean valid = true;
 
     var strNameArr = this.profile.getNip05().split("@");
@@ -55,17 +47,16 @@ public final class MetadataEvent extends GenericEvent {
   @Override
   public void update() {
     setContent();
-
-        super.update();
+    ((GenericEventImpl) genericEvent).update();
   }
 
   private void setContent() {
     var mapper = IEncoder.MAPPER;
     try {
       ObjectNode objNode = JsonNodeFactory.instance.objectNode();
-            objNode.set("name", mapper.valueToTree(this.getProfile().getName()));
-            objNode.set("about", mapper.valueToTree(this.getProfile().getAbout()));
-            objNode.set("picture", mapper.valueToTree(this.getProfile().getPicture().toString()));
+      objNode.set("name", mapper.valueToTree(profile.getName()));
+      objNode.set("about", mapper.valueToTree(profile.getAbout()));
+      objNode.set("picture", mapper.valueToTree(profile.getPicture().toString()));
 
       setContent(mapper.writeValueAsString(objNode));
     } catch (JsonProcessingException | IllegalArgumentException e) {
diff --git a/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP01.java b/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP01.java
index c61eaa9..af81397 100644
--- a/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP01.java
+++ b/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP01.java
@@ -4,12 +4,7 @@
  */
 package nostr.api.factory.impl;
 
@@ -19,23 +14,21 @@ import nostr.base.UserProfile;
 
 public class NIP01 {
@@ -87,7 +80,9 @@ public class NIP01 {
 
     @Override
     public MetadataEvent create() {
-            return new MetadataEvent(getSender(), profile);
+      var baseEvent = new GenericEventImpl();
+      baseEvent.setPubKey(getSender());
+      return new MetadataEvent(baseEvent, profile);
     }
   }
 
diff --git a/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP08.java b/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP08.java
index d8bbf9a..6816925 100644
--- a/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP08.java
+++ b/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP08.java
@@ -4,17 +4,17 @@
  */
 package nostr.api.factory.impl;
 
 public class NIP08 {
@@ -37,7 +37,9 @@ public class NIP08 {
 
     @Override
     public MentionsEvent create() {
-            var event = new nostr.event.impl.MentionsEvent(getSender(), getTags(), getContent());
+      var event = new MentionsEvent(new GenericEventImpl());
+      event.setTags(getTags());
+      event.setContent(getContent());
       getTags().forEach(t -> event.addTag(t));
       return event;
     }
diff --git a/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP15.java b/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP15.java
index da25c01..eb1ace9 100644
--- a/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP15.java
+++ b/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP15.java
@@ -4,25 +4,19 @@
  */
 package nostr.api.factory.impl;
 
 
 public class NIP15 {
@@ -55,7 +49,11 @@ public class NIP15 {
 
     @Override
     public VerifyPaymentOrShippedEvent create() {
-            return new VerifyPaymentOrShippedEvent(getSender(), customer, status);
+//            return new VerifyPaymentOrShippedEvent(getSender(), customer, status);
+      var event = new VerifyPaymentOrShippedEvent(
+          new CheckoutEvent(
+              new GenericEventImpl()), customer, status);
+      return event;
     }
 
   }
@@ -82,7 +80,11 @@ public class NIP15 {
 
     @Override
     public MerchantRequestPaymentEvent create() {
-            return new MerchantRequestPaymentEvent(getSender(), this.customer, payment);
+      var event = new MerchantRequestPaymentEvent(
+          new CustomerOrderEvent(
+              new GenericEventImpl(), customer), payment);
+      event.setPubKey(getSender());
+      return event;
     }
   }
 
@@ -105,7 +107,9 @@ public class NIP15 {
 
     @Override
     public CustomerOrderEvent create() {
-            return new CustomerOrderEvent(getSender(), customer);
+      var event = new CustomerOrderEvent(new GenericEventImpl(), customer);
+      event.setPubKey(getSender());
+      return event;
     }
 
   }
@@ -129,7 +133,12 @@ public class NIP15 {
 
     @Override
     public CreateOrUpdateStallEvent create() {
-            return new CreateOrUpdateStallEvent(getSender(), new ArrayList<>(), stall);
+//            return new CreateOrUpdateStallEvent(getSender(), new ArrayList<>(), stall);
+      var event = new CreateOrUpdateStallEvent(
+          new NostrMarketplaceEvent(
+              new GenericEventImpl()), stall);
+      event.setPubKey(getSender());
+      return event;
     }
 
   }
@@ -138,17 +147,17 @@ public class NIP15 {
   @EqualsAndHashCode(callSuper = false)
   public static class CreateOrUpdateProductEventFactory extends EventFactory<CreateOrUpdateProductEvent> {
 
-        private final NostrMarketplaceEvent.Product product;
+    private final Product product;
     private final List<String> categories;
 
-        public CreateOrUpdateProductEventFactory(@NonNull NostrMarketplaceEvent.Product product, List<String> categories) {
+    public CreateOrUpdateProductEventFactory(@NonNull Product product, List<String> categories) {
       super(product.toString());
       this.product = product;
       this.categories = categories;
     }
 
     @Deprecated
-        public CreateOrUpdateProductEventFactory(Identity identity, @NonNull NostrMarketplaceEvent.Product product, List<String> categories) {
+    public CreateOrUpdateProductEventFactory(Identity identity, @NonNull Product product, List<String> categories) {
       super(identity, product.toString());
       this.product = product;
       this.categories = categories;
@@ -156,7 +165,13 @@ public class NIP15 {
 
     @Override
     public CreateOrUpdateProductEvent create() {
-            var event = new CreateOrUpdateProductEvent(getSender(), new ArrayList<>(), product);
+      var event = new CreateOrUpdateProductEvent(
+          new NostrMarketplaceEvent(
+              new ParameterizedReplaceableEvent(
+                  new ReplaceableEvent(
+                      new GenericEventImpl()))));
+      event.setPubKey(getSender());
+      event.setContent(product.toString());
       event.addTag(new IdentifierTag(product.getId()));
       if (categories != null) {
         categories.forEach(c -> event.addTag(new HashtagTag(c)));
diff --git a/nostr-java-api/src/main/java/nostr/api/NIP28.java b/nostr-java-api/src/main/java/nostr/api/NIP28.java
index d3a0397..6d7c661 100644
--- a/nostr-java-api/src/main/java/nostr/api/NIP28.java
+++ b/nostr-java-api/src/main/java/nostr/api/NIP28.java
@@ -7,7 +7,6 @@ package nostr.api;
@@ -15,7 +14,6 @@ import nostr.base.PublicKey;
 
@@ -40,35 +38,35 @@ public class NIP28 {
      * @param content the message
      * @return 
      */
-    public static ChannelMessageEvent createChannelMessageEvent(@NonNull ChannelCreateEvent channelCreateEvent, String content) {
-        return createChannelMessageEvent(channelCreateEvent, null, content);
+    public static ChannelMessageEvent createInitialChannelMessageEvent(@NonNull ChannelCreateEvent channelCreateEvent, String content) {
+        return createInitialChannelMessageEvent(channelCreateEvent, null, content);
     }
 
     /**
      * Create a KIND-42 channel message reply
      * @param channelCreateEvent KIND-40 channel create event
-     * @param channelMessageEvent the KIND-42 channel message event 
+     * @param channelMessageEventCanBeNullOnInitial the KIND-42 channel message event
      * @param content the message
      * @return 
      */
-    public static ChannelMessageEvent createChannelMessageEvent(@NonNull ChannelCreateEvent channelCreateEvent, ChannelMessageEvent channelMessageEvent, String content) {
-        return createChannelMessageEvent(channelCreateEvent, channelMessageEvent, content, null, null);
+    public static ChannelMessageEvent createInitialChannelMessageEvent(@NonNull ChannelCreateEvent channelCreateEvent, ChannelMessageEvent channelMessageEventCanBeNullOnInitial, String content) {
+        return createInitialChannelMessageEvent(channelCreateEvent, channelMessageEventCanBeNullOnInitial, content, null, null);
     }
 
     /**
      * Create a KIND-41 channel message reply while specifying the recommended relays
      * @param channelCreateEvent KIND-40 channel create event
-     * @param channelMessageEvent the KIND-42 channel message event
+     * @param initialChannelMessageEvent the KIND-42 channel message event
      * @param content the message
-     * @param recommendedRelayRoot the recommended relay for the KIND-40 event
-     * @param recommendedRelayReply the recommended relay for the KIND-42 event
+     * @param recommendedRelayRootCanBeNullOnInitial the recommended relay for the KIND-40 event
+     * @param recommendedRelayReplyCanBeNullOnInitial the recommended relay for the KIND-42 event
      * @return 
      */
-    public static ChannelMessageEvent createChannelMessageEvent(@NonNull ChannelCreateEvent channelCreateEvent, @NonNull ChannelMessageEvent channelMessageEvent, String content, Relay recommendedRelayRoot, Relay recommendedRelayReply) {
+    public static ChannelMessageEvent createInitialChannelMessageEvent(@NonNull ChannelCreateEvent channelCreateEvent, @NonNull ChannelMessageEvent initialChannelMessageEvent, String content, Relay recommendedRelayRootCanBeNullOnInitial, Relay recommendedRelayReplyCanBeNullOnInitial) {
         var factory = new ChannelMessageEventFactory(channelCreateEvent, content);
-        factory.setRecommendedRelayReply(recommendedRelayReply);
-        factory.setRecommendedRelayRoot(recommendedRelayRoot);
-        factory.setChannelMessageEvent(channelMessageEvent);
+        factory.setRecommendedRelayReply(recommendedRelayReplyCanBeNullOnInitial);
+        factory.setRecommendedRelayRoot(recommendedRelayRootCanBeNullOnInitial);
+        factory.setChannelMessageEvent(initialChannelMessageEvent);
         return factory.create();
     }
     
@@ -78,9 +76,9 @@ public class NIP28 {
      * @param profile the channel metadata 
      * @return 
      */
-    public static ChannelMetadataEvent createChannelMetadataEvent(@NonNull ChannelCreateEvent channelCreateEvent, @NonNull ChannelProfile profile) {
-        return new ChannelMetadataEventFactory(channelCreateEvent, profile).create();
-    }
+//    public static ChannelMetadataEvent createChannelMetadataEvent(@NonNull ChannelCreateEvent channelCreateEvent, @NonNull ChannelProfile profile) {
+//        return new ChannelMetadataEventFactory(channelCreateEvent, profile).create();
+//    }
     
     /**
      * Create a KIND-43 hide message event
diff --git a/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP28.java b/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP28.java
index 394d63e..2f55194 100644
--- a/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP28.java
+++ b/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP28.java
@@ -12,17 +12,12 @@ import nostr.base.ChannelProfile;
 
 
 public class NIP28 {
@@ -40,7 +35,7 @@ public class NIP28 {
 
     @Override
     public ChannelCreateEvent create() {
-            return new ChannelCreateEvent(getSender(), profile);
+      return new ChannelCreateEvent(new GenericEventImpl(getSender()), profile);
     }
   }
 
@@ -48,24 +43,26 @@ public class NIP28 {
   @EqualsAndHashCode(callSuper = false)
   public static class ChannelMessageEventFactory extends EventFactory<ChannelMessageEvent> {
 
-        private final ChannelCreateEvent rootEvent;
+    private final ChannelCreateEvent channelCreateEventRoot;
     private ChannelMessageEvent channelMessageEvent;
     private Relay recommendedRelayRoot;
     private Relay recommendedRelayReply;
 
-        public ChannelMessageEventFactory(@NonNull ChannelCreateEvent rootEvent, @NonNull String content) {
+    public ChannelMessageEventFactory(@NonNull ChannelCreateEvent channelCreateEventRoot, @NonNull String content) {
       super(content);
-            this.rootEvent = rootEvent;
+      this.channelCreateEventRoot = channelCreateEventRoot;
     }
 
-        public ChannelMessageEventFactory(@NonNull Identity sender, @NonNull ChannelCreateEvent rootEvent, @NonNull String content) {
-            super(sender, content);
-            this.rootEvent = rootEvent;
-        }
+//    public ChannelMessageEventFactory(@NonNull Identity sender, @NonNull ChannelCreateEvent channelCreateEventRoot, @NonNull String content) {
+//      super(sender, content);
+//      this.channelCreateEventRoot = channelCreateEventRoot;
+//    }
 
     @Override
     public ChannelMessageEvent create() {
-            return new ChannelMessageEvent(getSender(), rootEvent, channelMessageEvent, getContent(), recommendedRelayRoot, recommendedRelayReply);
+      var channelCreateEvent = new ChannelCreateEvent(new GenericEventImpl(getSender()), channelCreateEventRoot);
+      var channelMessageEvent = new ChannelMessageEvent(channelCreateEvent, channelCreateEventRoot);
+      return new ChannelMessageEvent(getSender(), channelCreateEventRoot, channelMessageEvent, getContent(), recommendedRelayRoot, recommendedRelayReply);
     }
   }
 
@@ -90,7 +87,11 @@ public class NIP28 {
 
     @Override
     public ChannelMetadataEvent create() {
-            return new ChannelMetadataEvent(getSender(), channelCreateEvent, profile);
+      var channelCreateEvent = new ChannelCreateEvent(new GenericEventImpl());
+      var channelMessageEvent = new ChannelMessageEvent(channelCreateEvent);
+      var channelMetadataEvent = new ChannelMetadataEvent(channelMessageEvent);
+      channelMetadataEvent.setChannelProfile(profile);
+      return channelMetadataEvent;
     }
   }
 
diff --git a/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP42.java b/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP42.java
index 84f54fc..b2f1456 100644
--- a/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP42.java
+++ b/nostr-java-api/src/main/java/nostr/api/factory/impl/NIP42.java
@@ -4,9 +4,6 @@
  */
 package nostr.api.factory.impl;
 
@@ -19,12 +16,16 @@ import nostr.base.ElementAttribute;
 
+
 public class NIP42 {
@@ -62,7 +63,10 @@ public class NIP42 {
 
     @Override
     public ClientAuthenticationEvent create() {
-            return new ClientAuthenticationEvent(getSender(), challenge, relay);
+      var event = new ClientAuthenticationEvent(
+          new GenericEventImpl(), challenge, relay);
+      event.setPubKey(getSender());
+      return event;
     }
   }
 
@@ -71,7 +75,7 @@ public class NIP42 {
   public static class RelaysTagFactory extends TagFactory {
 
     public RelaysTagFactory(List<Relay> relays) {
-            super("relays", 42, relays.stream().map(r -> r.getHostname()).collect(Collectors.joining(",")));
+      super("relays", 42, relays.stream().map(Relay::getHostname).collect(Collectors.joining(",")));
     }
 
     public RelaysTagFactory(Relay relay) {
diff --git a/nostr-java-examples/src/main/java/nostr/examples/NostrApiExamples.java b/nostr-java-examples/src/main/java/nostr/examples/NostrApiExamples.java
index 0bc5483..a54c79c 100644
--- a/nostr-java-examples/src/main/java/nostr/examples/NostrApiExamples.java
+++ b/nostr-java-examples/src/main/java/nostr/examples/NostrApiExamples.java
@@ -1,45 +1,34 @@
 package nostr.examples;
 
 @Log
@@ -121,7 +110,7 @@ public class NostrApiExamples {
       });
 
       executor.submit(() -> {
-                sendChannelMessage();
+        sendInitialMessageToNobody();
       });
 
       executor.submit(() -> {
@@ -293,24 +282,23 @@ public class NostrApiExamples {
 
   }
 
-    private static GenericEvent sendChannelMessage() {
-        logHeader("sendChannelMessage");
+  private static GenericEvent sendInitialMessageToNobody() {
+    logHeader("sendInitialMessageToNobody");
 
-        var channelCreateEvent = createChannel();
+    var initialChannelCreateEvent = createChannel();
+    var initialEvent = NIP28.createInitialChannelMessageEvent((ChannelCreateEvent) initialChannelCreateEvent, "Hello everybody!");
+    Nostr.sign(initialEvent);
+    Nostr.send(initialEvent);
 
-        GenericEvent event = NIP28.createChannelMessageEvent((ChannelCreateEvent) channelCreateEvent, "Hello everybody!");
-        Nostr.sign(event);
-        Nostr.send(event);
-
-        return event;
+    return initialEvent;
   }
 
-    private static GenericEvent hideMessage() {
+  private static GenericEventImpl hideMessage() {
     logHeader("hideMessage");
 
-        var channelMessageEvent = sendChannelMessage();
+    var sendInitialMessageToNobodyMessageEvent = sendInitialMessageToNobody();
 
-        GenericEvent event = NIP28.createHideMessageEvent((ChannelMessageEvent) channelMessageEvent, "Dick pic");
+    GenericEventImpl event = NIP28.createHideMessageEvent((ChannelMessageEvent) sendInitialMessageToNobodyMessageEvent, "Dick pic");
 
     Nostr.sign(event);
     Nostr.send(event);
@@ -318,10 +306,10 @@ public class NostrApiExamples {
     return event;
   }
 
-    private static GenericEvent muteUser() {
+  private static GenericEventImpl muteUser() {
     logHeader("muteUser");
 
-        GenericEvent event = NIP28.createMuteUserEvent(RECEIVER.getPublicKey(), "Posting dick pics");
+    GenericEventImpl event = NIP28.createMuteUserEvent(RECEIVER.getPublicKey(), "Posting dick pics");
 
     Nostr.sign(event);
     Nostr.send(event);
diff --git a/nostr-java-examples/src/main/java/nostr/examples/NostrExamples.java b/nostr-java-examples/src/main/java/nostr/examples/NostrExamples.java
index cf79208..568e4c8 100644
--- a/nostr-java-examples/src/main/java/nostr/examples/NostrExamples.java
+++ b/nostr-java-examples/src/main/java/nostr/examples/NostrExamples.java
@@ -1,57 +1,41 @@
 package nostr.examples;
 
@@ -214,7 +198,11 @@ public class NostrExamples {
       List<BaseTag> tags = new ArrayList<>();
       tags.add(rcptTag);
 
-            var event2 = new DirectMessageEvent(publicKeySender, tags, "Hello Nakamoto!");
+      var event2 = new DirectMessageEvent(
+          new GenericEventImpl());
+      event2.setPubKey(publicKeySender);
+      event2.setTags(tags);
+      event2.setContent("Hello Nakamoto!");
 
       new IdentityHelper(SENDER).encryptDirectMessage(event2);
       SENDER.sign(event2);
@@ -237,7 +225,10 @@ public class NostrExamples {
     List<BaseTag> tags = new ArrayList<>();
     tags.add(rcptTag);
 
-        GenericEvent event = new MentionsEvent(publicKeySender, tags, "Hello " + RECEIVER.getPublicKey().toString());
+    var event = new MentionsEvent(new GenericEventImpl());
+    event.setPubKey(publicKeySender);
+    event.setTags(tags);
+    event.setContent("Hello " + RECEIVER.getPublicKey().toString());
     SENDER.sign(event);
 
     BaseMessage message = new EventMessage(event);
@@ -278,7 +269,9 @@ public class NostrExamples {
 
     final PublicKey publicKeySender = SENDER.getPublicKey();
 
-        var event = new MetadataEvent(publicKeySender, PROFILE);
+    var genericEvent = new GenericEventImpl();
+    genericEvent.setPubKey(publicKeySender);
+    var event = new MetadataEvent(genericEvent, PROFILE);
 
     SENDER.sign(event);
     BaseMessage message = new EventMessage(event);
@@ -322,7 +315,10 @@ public class NostrExamples {
     tags = new ArrayList<>();
     tags.add(EventTag.builder().idEvent(event.getId()).build());
     tags.add(PubKeyTag.builder().publicKey(publicKeySender).build());
-        GenericEvent reactionEvent = new ReactionEvent(publicKeySender, tags, Reaction.LIKE);
+    var reactionEvent = new ReactionEvent(
+        new GenericEventImpl());
+    reactionEvent.setTags(tags);
+    reactionEvent.setReaction(Reaction.LIKE);
 
     SENDER.sign(reactionEvent);
     message = new EventMessage(reactionEvent);
@@ -348,14 +344,26 @@ public class NostrExamples {
 
     tags = new ArrayList<>();
     tags.add(EventTag.builder().idEvent(event.getId()).build());
-        GenericEvent replaceableEvent = new ReplaceableEvent(publicKeySender, 15000, tags, "Content");
+//        GenericEventImpl replaceableEvent = new ReplaceableEvent(publicKeySender, 15000, tags, "Content");
+    var replaceableEvent = new ReplaceableEvent(
+        new GenericEventImpl());
+    event.setPubKey(publicKeySender);
+    event.setKind(Kind.valueOf(15000));
+    event.setTags(tags);
+    event.setContent("Content");
 
     SENDER.sign(replaceableEvent);
     message = new EventMessage(replaceableEvent);
 
     CLIENT.send(message);
 
-        replaceableEvent = new ReplaceableEvent(publicKeySender, 15000, tags, "New Content");
+//        replaceableEvent = new ReplaceableEvent(publicKeySender, 15000, tags, "New Content");
+    replaceableEvent = new ReplaceableEvent(
+        new GenericEventImpl());
+    event.setPubKey(publicKeySender);
+    event.setKind(Kind.valueOf(15000));
+    event.setTags(tags);
+    event.setContent("New Content");
 
     SENDER.sign(replaceableEvent);
     message = new EventMessage(replaceableEvent);
@@ -372,7 +380,7 @@ public class NostrExamples {
     List<BaseTag> tags = new ArrayList<>();
     tags.add(rcptTag);
 
-        GenericEvent event = new InternetIdentifierMetadataEvent(publicKeySender, PROFILE);
+    var event = new InternetIdentifierMetadataEvent(new GenericEventImpl(), PROFILE);
 
     SENDER.sign(event);
     BaseMessage message = new EventMessage(event);
@@ -406,14 +414,14 @@ public class NostrExamples {
       final PublicKey publicKeySender = SENDER.getPublicKey();
 
       var channel = new ChannelProfile("JNostr Channel", "This is a channel to test NIP28 in nostr-java", "https://cdn.pixabay.com/photo/2020/05/19/13/48/cartoon-5190942_960_720.jpg");
-            var event = new ChannelCreateEvent(publicKeySender, channel);
+      var channelCreateEvent = new ChannelCreateEvent(new GenericEventImpl(publicKeySender), channel);
 
-            SENDER.sign(event);
-            BaseMessage message = new EventMessage(event);
+      SENDER.sign(channelCreateEvent);
+      BaseMessage message = new EventMessage(channelCreateEvent);
 
       CLIENT.send(message);
 
-            return event;
+      return channelCreateEvent;
     } catch (MalformedURLException | URISyntaxException ex) {
       throw new RuntimeException(ex);
     }
@@ -428,7 +436,10 @@ public class NostrExamples {
 
       var channel = new ChannelProfile("JNostr Channel | changed", "This is a channel to test NIP28 in nostr-java | changed", "https://cdn.pixabay.com/photo/2020/05/19/13/48/cartoon-5190942_960_720.jpg");
 
-            GenericEvent event = new ChannelMetadataEvent(publicKeySender, (ChannelCreateEvent) channelCreateEvent, channel);
+      var channelMetadataEvent = new ChannelMetadataEvent(
+          new GenericEventImpl(publicKeySender));
+      var event = new ChannelCreateEvent(channelMetadataEvent, channel);
+      event.setPubKey(publicKeySender);
 
       SENDER.sign(event);
       var message = new EventMessage(event);
@@ -443,9 +454,9 @@ public class NostrExamples {
     logHeader("sendChannelMessage");
     final PublicKey publicKeySender = SENDER.getPublicKey();
 
-        var channelCreateEvent = createChannel();
-
-        var event = new ChannelMessageEvent(publicKeySender, (ChannelCreateEvent) channelCreateEvent, "Hello everybody!");
+    var event = createChannel();
+    event.setPubKey(publicKeySender);
+    event.setContent("Hello everybody!");
 
     SENDER.sign(event);
     var message = new EventMessage(event);
